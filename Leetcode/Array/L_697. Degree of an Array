// https://leetcode.com/problems/degree-of-an-array/

public class Solution {
    public int FindShortestSubArray(int[] nums) {
        Dictionary<int, int> leftIndex = new Dictionary<int,int>();
        Dictionary<int, int> rightIndex = new Dictionary<int,int>();
        Dictionary<int, int> degree = new Dictionary<int,int>();
        int minLength = 50000;
        for(int i =0;i<nums.Length;i++)
        {
            if(!leftIndex.ContainsKey(nums[i]))
                leftIndex[nums[i]] = i;
            rightIndex[nums[i]] = i;
            if(degree.ContainsKey(nums[i]))
                degree[nums[i]] = degree[nums[i]] +1;
            else
                degree[nums[i]] = 1;
        }
        int maxCount = degree.Values.Max();
        for(int i = 0;i<nums.Length;i++)
        {
            if(degree[nums[i]] == maxCount)
                minLength = Math.Min(rightIndex[nums[i]] - leftIndex[nums[i]] + 1, minLength);
        }
        return minLength;
    }
}
